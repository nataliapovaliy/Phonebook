{"version":3,"file":"static/js/566.e2e2546f.chunk.js","mappings":"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","sources":["redux/contacts/selectorContacts.js","components/ContactForm/ContactForm.jsx","components/Contact/Contact.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Phonebook/Phonebook.jsx","../node_modules/@chakra-ui/layout/dist/chunk-P74GIWPW.mjs"],"sourcesContent":["export const selectItems = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\n","import { useState } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/contacts/operationsContacts';\nimport { selectItems } from '../../redux/contacts/selectorContacts';\nimport { Input, Stack, Button, Box, Heading } from '@chakra-ui/react';\n\nconst ContactForm = () => {\n    const dispatch = useDispatch();\n    const contacts  = useSelector (selectItems);\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n    \n    const handleChange = (event) => {\n        const { name, value } = event.target;\n        if (name === 'name') setName(value);\n        else setNumber(value);\n        console.log('handleChange', event.target.value);\n    }\n\n    const handleInput = (event) => {\n        console.log('event', event.target[0].value);\n        event.preventDefault();\n        const dublicate = contacts.find(contact => contact.name.toLowerCase() === event.target[0].value.toLowerCase());\n        if (dublicate) { return alert(`${event.name} is already in contacts`); }\n\n        dispatch(addContact({\n            name,\n            number,}));\n        reset();\n    }\n\n    const reset = () => {\n        setName('');\n        setNumber('');\n    }\n\n    return (\n            \n        <Box width=\"400px\"  >\n            <Heading m={[3, 4]} fontSize={22}>Phonebook</Heading>\n            <form onSubmit={handleInput} autoComplete=\"off\">\n            <Stack spacing={3} ml={4} >\n        \n                <Input boxShadow='base' rounded='md' border='1px' borderColor='#C1C1C1' p='2'\n                    placeholder='Enter Name'\n                    onChange={handleChange} value={name} type=\"text\" name=\"name\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                />\n            \n                <Input boxShadow='base' rounded='md' border='1px' borderColor='#C1C1C1' p='2'\n                    placeholder='Enter phone'\n                    onChange={handleChange} value={number} type=\"tel\" name=\"number\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                />\n            </Stack>\n\n            <Button type=\"submit\" colorScheme='teal' variant='solid' m={[3, 4]} >Add</Button >\n        </form>\n        </Box>\n        )\n}\n\nexport default ContactForm","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { delContact } from '../../redux/contacts/operationsContacts';\nimport { Stack, Button, Box, Text } from '@chakra-ui/react';\n\nexport function Contact({ name, number, id }) {\n    const dispatch = useDispatch();\n\n    return (\n        <Box width=\"400px\" m={[3, 4]}>\n            <Stack spacing={4} direction='row' align='center'>\n                <Text fontSize={16} > {name}: {number} </Text>\n            <Button colorScheme='teal' variant='outline' size='xs' m={[3, 4]} type=\"submit\"\n                onClick={() => dispatch(delContact(id))}>Delete</Button >\n            </Stack>\n            \n        </Box>\n    )\n}\n\nContact.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n\n};","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\"};","import PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Contact } from '../Contact/Contact';\nimport css from '../ContactList/ContactList.module.css';\nimport { fetchContacts } from '../../redux/contacts/operationsContacts';\nimport { selectToken } from 'redux/auth/selectorAuth';\n\n\nexport function ContactList({ contacts }) {\n    const token = useSelector(selectToken);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n    token &&\n    dispatch(fetchContacts());\n}, [dispatch, token]);\n\n    return (\n        <ul className={css.list}>\n            {contacts.map(({id, name, number}) => {\n                return (\n                    <li key={id}>\n                        <Contact\n                            name={name}\n                            number={number}\n                            id={id}\n                        />\n                    </li>\n                )}\n            )}\n        </ul>\n    )\n}\n\nContactList.propTypes = {\n    contacts: PropTypes.arrayOf(\n        PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n        })\n    ),\n};","import { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from '../../redux/contacts/selectorContacts';\nimport { filterSlice } from '../../redux/contacts/sliceFilter';\nimport { Input, Stack, Box, Heading } from '@chakra-ui/react';\n\nexport function Filter() {\n    const filter = useSelector(selectFilter);\n    const dispatch = useDispatch();\n\n    const changeFilter = event => {\n        dispatch(filterSlice(event.target.value))\n    }\n    \n    return (\n        <>\n            <Box width=\"400px\">\n                <Heading m={[3, 4]} fontSize={22}>Contacts</Heading>\n                <Stack spacing={3} ml={4} autoComplete=\"off\">\n\n                    <Input boxShadow='base' rounded='md' border='1px' borderColor='#C1C1C1' p='2'\n                        placeholder='Find contacts by name'\n                        onChange={changeFilter} value={filter} type=\"text\" name=\"contacts\"\n                        required />\n                </Stack>\n\n            </Box>\n\n            {/* <div className={css.filter}>\n                <label className={css.label}>\n                    Find contacts by name\n                    <input\n                        className={css.input}\n                        type=\"text\"\n                        name=\"contacts\"\n                        value={filter}\n                        onChange={changeFilter}\n                        required\n                    />\n                </label>\n        </div> */}\n        </>\n    )\n}\n","import ContactForm from '../../components/ContactForm/ContactForm';\nimport { ContactList } from '../../components/ContactList/ContactList';\nimport { Filter } from '../../components/Filter/Filter';\nimport { useSelector } from 'react-redux';\nimport { selectItems, selectIsLoading, selectError, selectFilter } from '../../redux/contacts/selectorContacts';\n\nconst Phonebook = () => {\n    const contacts  = useSelector(selectItems);\n    const isLoading = useSelector(selectIsLoading);\n    const error = useSelector(selectError);\n    const filter = useSelector(selectFilter);\n\n    const checkContact = () => {\n    if (!filter) return contacts;\n        const checkFilter = filter?.toLowerCase();\n        return contacts.filter(contact => contact.name.toLowerCase().includes(checkFilter));\n    }\n    return (\n            <>\n                <ContactForm />\n                <Filter />\n                {isLoading && <p>Loading contacts...</p>}\n                {error && <p>{error}</p>}\n                <ContactList contacts={checkContact()}/>\n            </>\n    )\n}\n\nexport default Phonebook","// src/text.tsx\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { compact } from \"@chakra-ui/object-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Text = forwardRef(function Text2(props, ref) {\n  const styles = useStyleConfig(\"Text\", props);\n  const { className, align, decoration, casing, ...rest } = omitThemingProps(props);\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing\n  });\n  return /* @__PURE__ */ jsx(\n    chakra.p,\n    {\n      ref,\n      className: cx(\"chakra-text\", props.className),\n      ...aliasedProps,\n      ...rest,\n      __css: styles\n    }\n  );\n});\nText.displayName = \"Text\";\n\nexport {\n  Text\n};\n"],"names":["selectItems","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","dispatch","useDispatch","useSelector","useState","name","setName","number","setNumber","handleChange","event","target","value","console","log","reset","width","m","fontSize","onSubmit","preventDefault","find","contact","toLowerCase","alert","addContact","autoComplete","spacing","ml","I","boxShadow","rounded","border","borderColor","p","placeholder","onChange","type","pattern","title","required","colorScheme","variant","Contact","id","direction","align","size","onClick","delContact","ContactList","token","selectToken","useEffect","fetchContacts","className","css","map","Filter","filterSlice","checkFilter","includes","checkContact","Text","forwardRef","props","ref","styles","useStyleConfig","omitThemingProps","rest","decoration","casing","aliasedProps","compact","textAlign","textDecoration","textTransform","jsx","chakra","cx","__css","displayName"],"sourceRoot":""}